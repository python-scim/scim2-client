[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "scim2-client"
version = "0.5.2"
description = "Pythonically build SCIM requests and parse SCIM responses"
authors = [{name="Yaal Coop", email="contact@yaal.coop"}]
license = {file = "LICENSE.md"}
readme = "README.md"
keywords = ["scim", "scim2", "provisioning", "rfc7643", "rfc7644", "httpx", "api"]
classifiers = [
    "Intended Audience :: Developers",
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "License :: OSI Approved :: Apache Software License",
    "Environment :: Web Environment",
    "Programming Language :: Python",
    "Operating System :: OS Independent",
]

requires-python = ">= 3.9"
dependencies = [
    "scim2-models>=0.2.0",
]

[project.optional-dependencies]
httpx = [
    "httpx>=0.28.0",
]

werkzeug = [
    "werkzeug>=3.1.3",
]

[project.urls]
documentation = "https://scim2-client.readthedocs.io"
repository = "https://github.com/python-scim/scim2-client"
changelog = "https://scim2-client.readthedocs.io/en/latest/changelog.html"
funding = "https://github.com/sponsors/python-scim"

[dependency-groups]
dev = [
    "mypy>=1.13.0",
    "portpicker>=1.6.0",
    "pre-commit-uv>=4.1.4",
    "pytest>=8.2.1",
    "pytest-asyncio>=0.24.0",
    "pytest-coverage>=0.0",
    "pytest-httpserver>=1.1.0",
    "scim2-server >= 0.1.2; python_version>='3.10'",
    "tox-uv>=1.16.0",
    "werkzeug>=3.1.3",
]
doc = [
    "autodoc-pydantic>=2.2.0",
    "myst-parser>=3.0.1",
    "shibuya>=2024.5.15",
    "sphinx-issues >= 5.0.0",
    "sphinx>=7.3.7",
    "sphinx-paramlinks>=0.6.0",
]

[tool.coverage.run]
source = [
    "scim2_client",
    "tests",
]
omit = [".tox/*"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "@pytest.mark.skip",
    "pragma: no cover",
    "raise NotImplementedError",
    "\\.\\.\\.\\s*$", # ignore ellipsis
]

[tool.ruff.lint]
select = [
    "B", # flake8-bugbear
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "UP", # pyupgrade
]
ignore = [
    "E501", # line-too-long
    "E722", # bare-except
    "D100", # public module
    "D101", # public class
    "D102", # public method
    "D103", # public function
    "D104", # public package
    "D105", # magic method
    "D106", # nested class
    "D107", # public init
    "D203", # no-blank-line-before-class
    "D213", # multi-line-summary-second-line
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.format]
docstring-code-format = true

[tool.mypy]
plugins = [
  "pydantic.mypy"
]

[tool.pytest.ini_options]
asyncio_mode="auto"
asyncio_default_fixture_loop_scope = "function"

[tool.tox]
requires = ["tox>=4.19"]
env_list = [
    "style",
    "py39",
    "py310",
    "py311",
    "py312",
    "py313",
    "minversions",
    "doc",
    "coverage",
]

[tool.tox.env_run_base]
extras = ["httpx", "werkzeug"]
runner = "uv-venv-lock-runner"
dependency_groups = ["dev"]
commands = [
    ["pytest", "--showlocals", "--full-trace", "{posargs}"],
]

[tool.tox.env.style]
runner = "uv-venv-runner"
commands = [
    ["pre-commit", "run", "--all-files", "--show-diff-on-failure"],
]

[tool.tox.env.minversions]
runner = "uv-venv-runner"
uv_resolution = "lowest-direct"

[tool.tox.env.doc]
dependency_groups = ["doc"]
commands = [
    ["sphinx-build", "--builder", "html", "doc", "build/sphinx/html"],
    ["sphinx-build", "--builder", "man", "doc", "build/sphinx/html"],
]

[tool.tox.env.coverage]
commands = [
    ["pytest", "--cov", "--cov-fail-under=100", "--cov-report", "term:skip-covered", "{posargs}"],
    ["coverage", "html"],
]
